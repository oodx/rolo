ROLO TASK BREAKDOWN
===================
Story Points: Fibonacci (1, 2, 3, 5, 8, 13)
Sprint Velocity Target: 5-8 points

============================================================================
SPRINT 1-2: FOUNDATION (v0.1)
Total Points: 15
============================================================================

[3] TASK-001: Setup RSB Project with MODULE_SPEC Structure
    - Initialize Cargo project with RSB dependency
    - Create MODULE_SPEC compliant directories:
      * layout/ (mod.rs, utils.rs, helpers.rs, error.rs, macros.rs)
      * stream/ (mod.rs, utils.rs, helpers.rs, error.rs)
      * width/ (mod.rs, utils.rs, error.rs, width_boxy_adapter.rs)
      * cli/ (mod.rs, args.rs, dispatch.rs, error.rs)
      * theme/ (mod.rs, utils.rs, macros.rs)
    - Setup lib.rs with prelude exports
    - Setup main.rs for CLI entry
    - Configure rust-toolchain.toml
    Acceptance: Project structure matches MODULE_SPEC exactly

[3] TASK-002: Implement Width Module with Boxy Adapter
    - Copy width calculation logic from boxy
    - Create width_boxy_adapter.rs with feature gates
    - Implement fallback for when boxy feature is disabled
    - Add required dependencies (strip_ansi_escapes, unicode-width)
    - Create width/error.rs with typed errors
    - Write unit tests for both feature states
    Acceptance: Width calculation works with and without boxy feature

[2] TASK-003: Setup Prelude and Module Exports
    - Create prelude.rs with curated exports
    - Setup module orchestrators (mod.rs files)
    - Ensure no business logic in orchestrators
    - Export module-owned macros properly
    - Follow prelude policy (no optional features)
    Acceptance: Clean public API surface, imports work

[3] TASK-004: Implement CLI Module with RSB Patterns
    - Create cli/args.rs with RSB Args struct
    - Implement cli/dispatch.rs with dispatch! macro
    - Setup cli/error.rs for CLI errors
    - Add --help, --version, --width subcommands
    - Use validate! for error handling
    Acceptance: CLI responds to commands with proper error handling

[2] TASK-005: Stream Module Implementation
    - Create stream/utils.rs with buffered reading
    - Implement stream/helpers.rs for internal logic
    - Setup stream/error.rs for stream errors
    - Handle stdin/stdout properly
    - Support pipe breaks and EOF
    Acceptance: Can pipe text through rolo

[2] TASK-006: Feature Flags and Testing Setup
    - Configure Cargo.toml features per MODULE_SPEC
    - Create baseline tests without features
    - Add feature-gated tests for adapters
    - Setup test structure per module
    - Use utils::stderrx for non-visual logging
    Acceptance: Tests pass in both default and feature modes

============================================================================
SPRINT 3-4: CORE MODES (v0.2)
Total Points: 21
============================================================================

[5] TASK-007: Column Mode Implementation
    - Parse --cols N argument
    - Implement column layout algorithm
    - Handle ANSI-aware width padding
    - Add --gap option for spacing
    Acceptance: echo "a b c d" | rolo --cols 2 works

[5] TASK-008: Table Mode Implementation
    - Parse --table flag
    - Auto-detect column widths
    - Implement --delim for parsing
    - Handle row overflow
    Acceptance: cat data.tsv | rolo --table works

[3] TASK-009: List Mode Implementation
    - Single column formatting
    - Optional line numbers
    - Alignment options (left, right, center)
    - Width constraints
    Acceptance: ls | rolo --list works

[3] TASK-010: Terminal Width Detection
    - Integrate RSB host module for $COLUMNS
    - Implement --width override
    - Add --fit mode (default)
    - Handle terminal resize
    Acceptance: Respects terminal width

[3] TASK-011: Separator Support
    - Implement --sep for input splitting
    - Add regex separator support
    - Handle multi-character separators
    - Test with various delimiters
    Acceptance: Can split on custom separators

[2] TASK-012: Mode Integration Tests
    - Create test fixtures for each mode
    - Pipeline tests with sample data
    - Edge case testing
    - Performance baseline tests
    Acceptance: All modes have test coverage

============================================================================
SPRINT 5-6: INTEGRATION (v0.3)
Total Points: 13
============================================================================

[3] TASK-013: TokenStream Support
    - Study RSB tokens module
    - Implement TokenStream parser
    - Add --tokens input mode
    - Create token to table/column converter
    Acceptance: Can process RSB TokenStreams

[5] TASK-014: Pipeline Integration Tests
    - Create jynx → rolo tests
    - Create rolo → boxy tests
    - Full pipeline jynx → rolo → boxy tests
    - Document common patterns
    Acceptance: Works in ecosystem pipelines

[2] TASK-015: Performance Benchmarking
    - Setup criterion benchmarks
    - Benchmark each mode
    - Profile memory usage
    - Identify bottlenecks
    Acceptance: Baseline metrics established

[3] TASK-016: Documentation Sprint
    - Write comprehensive README
    - Create examples/ directory
    - Document each mode with examples
    - Add architecture.md
    Acceptance: New users can understand rolo

============================================================================
SPRINT 7-8: POLISH (v0.4)
Total Points: 13
============================================================================

[3] TASK-017: Advanced Alignment Options
    - Per-column alignment (--align L,C,R)
    - Padding control (--pad)
    - Header row support (--headers)
    - Footer row support
    Acceptance: Fine-grained layout control

[3] TASK-018: Border Styles
    - Implement --border none|ascii|unicode
    - Line drawing characters
    - Corner handling
    - Color support for borders
    Acceptance: Tables can have borders

[2] TASK-019: Truncation Policies
    - Implement --truncate with ellipsis
    - Add --wrap for line wrapping
    - Smart truncation (word boundaries)
    - Per-column truncation
    Acceptance: Long content handled gracefully

[3] TASK-020: Error Handling Enhancement
    - Improve error messages
    - Add --verbose debugging
    - Handle malformed input gracefully
    - Recovery strategies
    Acceptance: Clear, helpful error messages

[2] TASK-021: Test Coverage Push
    - Achieve 80% code coverage
    - Add property-based tests
    - Fuzz testing for parsers
    - Integration test expansion
    Acceptance: Robust test suite

============================================================================
SPRINT 9-10: PLUGINS (v0.5)
Total Points: 21
============================================================================

[5] TASK-022: Plugin Architecture
    - Design RoloPlugin trait
    - Implement plugin registry
    - Create plugin lifecycle hooks
    - Configuration loading system
    Acceptance: Plugin system functional

[3] TASK-023: CSV Plugin
    - CSV parsing with configurable options
    - Header detection
    - Quote handling
    - Type inference
    Acceptance: CSV files render as tables

[3] TASK-024: JSON Plugin
    - JSON parsing and flattening
    - Nested object handling
    - Array formatting
    - Pretty printing options
    Acceptance: JSON data displays structured

[3] TASK-025: Markdown Plugin
    - Generate markdown tables
    - GitHub-flavored markdown
    - Alignment syntax
    - Escape special characters
    Acceptance: Output valid markdown tables

[5] TASK-026: Configuration System
    - Parse ~/.config/rolo/config.toml
    - Environment variable overrides
    - Default configurations
    - Config validation
    Acceptance: Configuration affects behavior

[2] TASK-027: Plugin Documentation
    - Plugin development guide
    - Example plugin implementation
    - API documentation
    - Testing guidelines
    Acceptance: Others can write plugins

============================================================================
SPRINT 11-12: PRODUCTION (v1.0)
Total Points: 8
============================================================================

[3] TASK-028: Performance Optimization
    - Zero-copy where possible
    - Optimize hot paths
    - Reduce allocations
    - Parallel processing exploration
    Acceptance: Handles 10k+ lines/sec

[2] TASK-029: Release Preparation
    - Cargo.toml metadata
    - License selection
    - CHANGELOG.md
    - Security policy
    Acceptance: Ready for crates.io

[1] TASK-030: CI/CD Enhancement
    - Release automation
    - Binary builds for platforms
    - Documentation generation
    - Badge setup
    Acceptance: Automated releases work

[2] TASK-031: Paintbox Integration
    - Coordinate with paintbox project
    - Shared component extraction
    - Version synchronization
    - Integration testing
    Acceptance: Works with paintbox

============================================================================
BACKLOG (Future Sprints)
============================================================================

[8] Advanced Unix Features
    - pr: pagination, headers, footers
    - paste: file merging, serial mode
    - col: reverse line feeds, tab expansion

[5] Theme System
    - Shareable themes with jynx/boxy
    - Theme inheritance
    - Custom color schemes

[8] Interactive Mode
    - TUI for configuration
    - Live preview
    - Interactive column sizing

[13] Network Features
    - HTTP/HTTPS input sources
    - Streaming from URLs
    - WebSocket support

[5] DSL for Layouts
    - Custom layout language
    - Template system
    - Reusable layout definitions

============================================================================
NOTES
-----
- Tasks can be re-estimated after sprint planning
- Dependencies between tasks should be considered
- Some tasks can be done in parallel
- Prefer shipping working features over perfect code